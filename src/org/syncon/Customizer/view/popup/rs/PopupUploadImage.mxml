<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:popup1="org.syncon.NightStand.view.popup.*"
					  xmlns:popup="org.syncon.TalkingClock.view.popup.*"
					  xmlns:mobile="org.syncon.TalkingClock.view.mobile.*"
					  width="100%" height="100%" backgroundAlpha="0.0" creationComplete="onInit()"
					  implements="org.syncon.popups.view.IPopup" xmlns:popup2="org.syncon.Customizer.view.popup.*">
	
	<fx:Metadata> 
		[Event(name="cancel", type="flash.events.Event")] 		
		[Event(name="setup", type="flash.events.Event")] 
	</fx:Metadata> 	
	
	<fx:Script>
		<![CDATA[
			import org.virid.skins.Heading;
			
			import spark.events.IndexChangeEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const OK : String = 'save'; 	
			static public const CANCEL : String = 'cancel'; 	
			static public const SETUP : String = 'setup'; 	
			
			static public const REPEAT : String = 'REPEAT'; 	
			static public const NEXT_LESSON : String = 'NEXT_LESSON'; 	
			static public const GO_HOME : String = 'GO_HOME'; 	

			public var creationComplete : Boolean = false; 
			public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center();
				
			}
			
			public  function create(app:Object)  : IPopup
			{
				var popup :  PopupUploadImage = new PopupUploadImage()
				popup.popupCode =  PopupCode.Create( popup ,app ) 
				
				return popup			
			} 
			
			private var _popupCode :   PopupCode; 
			public function get  popupCode () : PopupCode { return _popupCode  } 
			public function set  popupCode ( _popupCode_ : PopupCode) : void {   _popupCode = _popupCode_  } 
			
			public function show()  : void
			{
				this.popupCode.open( false, true ) ;  
			}
			public function hide( ) : void
			{
				this.popupCode.close() 
			}
			
			
			protected function onSave(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( OK) ) 
			}
			
			protected function onCancel(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( CANCEL ) ) 
			}
			
			
			public var args : Array = [] ; 
			private var fxDone:Function;
			public function done(   fxDone : Function = null ) : void
			{
				this.width =  this.parentApplication.width*.8
				this.height =  this.parentApplication.height*.8
				this.dispatchEvent( new Event (SETUP   )) 
				this.show()
				this.fxDone = fxDone; 
			}
			
			protected function onRepeat(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( REPEAT ) ) 
			}
			
			protected function onNext(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( NEXT_LESSON ) )  
			}
			
			protected function noHome(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( GO_HOME ) ) 
			}			
						
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function h1_clickHandler(event:MouseEvent):void
			{
				this.setStyle("skinClass",Heading);
				
			}
			
		]]>
	</fx:Script>
	
	 
<!--	<s:Rect width="100%" height="100%" >
	<s:stroke>
	<s:SolidColorStroke color="0xFFFFFF" alpha="0.3" />
	</s:stroke>
	</s:Rect> -->
	<popup2:PopupBg alpha="1"/>
	

	<s:VGroup paddingBottom="32" paddingLeft="32" paddingRight="32" paddingTop="32">
		
		<s:Label id="h1" text="Upload Images Yo" click="h1_clickHandler(event)" />
		<s:List id="list" width="420" height="130" borderVisible="false"
				change="list_changeHandler(event)" contentBackgroundAlpha="0"
				itemRenderer="org.syncon.Customizer.view.popup.rs.PickImageRenderer">
			<s:layout>
				<s:TileLayout id="layoutT" columnWidth="90" horizontalAlign="center"
							  horizontalGap="0" paddingBottom="10" paddingLeft="10"
							  paddingRight="10" paddingTop="10" rowHeight="90" verticalGap="0"/>
				<!--
				columnWidth="{this.width*.9/2}" rowHeight="{this.width*.9/2}"
				-->
			</s:layout>
		</s:List>
		
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button label="Cancel" click="onCancel()"/>
		</s:HGroup>
	</s:VGroup>
	
	
	
	
	
	
</s:SkinnableContainer>
