<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 creationComplete="onInit(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.syncon.Customizer.vo.ImageLayerVO;
			
			//public var list : ListVO; 
			
			//public var dp : ArrayCollection = new ArrayCollection(); 
			
			public var creationComplete : Boolean = false; 
			
			protected function onInit(event:FlexEvent):void
			{
				this.creationComplete = true
			}
			private function init():void {
				
			}
			
			public var layer : ImageLayerVO = new ImageLayerVO(); 
			public var active:Boolean=true;
			public var resizedOnce:Boolean;
			
			public function set data ( value :   Object ) : void
			{
				this.img.source = null; 
				
				layer = value as ImageLayerVO
				if ( this.parentDocument == null ) 
					return; 
				this.parentDocument.resetting= false; 

				
				if ( layer == null ) 
				{
					this.img.source = null; 
					return; 
				}
				this.img.source  = layer.url; 
				this.resizedOnce = false; 
			}
			
			protected function img_resizeHandler(event:ResizeEvent):void
			{
				if ( this.active == false ) 
					return; 
				if ( this.layer == null ) 
					return; 
				
				this.resizedOnce = true; 
				this.height = this.img.height; 
				this.width = this.img.width; 
				
				/* this.layer.height = this.img.height; 
				this.layer.width = this.img.width;  */
				this.layer.nonChromeWidth = this.width; 
				this.layer.nonChromeHeight = this.height; 
				this.layer.update(); 
				//this.parentDocument.parentDocument.height = this.img.height; 
				//this.parentDocument.parentDocument.width = this.img.width; 
				//this.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				//this.parentDocument.parentDocument.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
			}
			
			protected function onComplete(event:Event):void
			{
				if ( this.parentDocument == null ) 
					return; 
				if ( this.active == false ) 
					return; 
				// TODO Auto-generated method stub
				//this.dispatchEvent( ) ) ; 
				//this.callLater( this.dispatchEvent, [new ResizeEvent(ResizeEvent.RESIZE)] )
				//this.parentDocument.parentDocument.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				//this.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
			}
			
		]]>
	</fx:Script>
	
	
	<s:Image id="img" complete="onComplete(event)" resize="img_resizeHandler(event)"/>
</s:Group>