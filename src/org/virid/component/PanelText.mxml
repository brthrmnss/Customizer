<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" xmlns:skins="org.syncon.Customizer.view.skins.*">
	
	<fx:Script>
		<![CDATA[
			import org.syncon.Customizer.model.CustomEvent;
			public static var ADD_TEXT:String='ADD_TEXT';
			
			protected function onAddText(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.dispatchEvent( new CustomEvent( ADD_TEXT) ) ;
			}
			
			
			
			import mx.collections.ArrayList;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			
			import org.syncon.Customizer.model.CustomEvent;
			import org.syncon.Customizer.vo.ImageLayerVO;
			import org.syncon.Customizer.vo.ItemRendererHelpers;
			import org.syncon.Customizer.vo.LayerBaseVO;
			import org.syncon.Customizer.vo.TextLayerVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			public static const CHANGE_FONT_FAMILY:String='CHANGE_FONT_FAMILY';
			public static const CHANGE_COLOR:String='CHANGE_COLOR';
			public static const CHANGE_FONT_SIZE:String='CHANGE_FONT_SIZE';
			public static const CHANGE_TEXT_ALIGN:String='CHANGE_TEXT_ALIGN';
			public static const CHANGED_TEXT:String='CHANGED_TEXT';
			public static const DATA_CHANGED:String='DATA_CHANGED';
			
			public var s : ItemRendererHelpers = new ItemRendererHelpers(null)
			protected function onInit(event:FlexEvent):void
			{
			}		
			private var _layer :  TextLayerVO = new TextLayerVO() ;
			public function get layer()  : TextLayerVO { return this._layer } 
			public function set layer (layer_ : TextLayerVO ) : void
			{
				s.listenForObj( layer_, LayerBaseVO.UPDATED, this.onUpdatedLayer ) ; 	
				this._layer = layer_; 
				this.onUpdatedLayer(); 
				this.dispatchEvent( new Event(DATA_CHANGED )  ) ; 
			}
			
			private function onUpdatedLayer(e:Event=null):void
			{
				this.txt.text = this.layer.text
				//only if fresh loading ...	
				if ( e == null ) 
				{
					this.txt.setFocus(); //try this for now 
					this.txt.selectRange( 0, this.txt.text.length ) ;
				}
				//this.fontFamily.selectedItem = this.layer.fontFamily
				//this.fontSize.selectedItem = this.layer.fontSize; 
				//.chkVisible.selected = this.layer.visible ; 
				txtMaxChars.text = ''; 
				this.txt.maxChars = 0;
				if ( this.layer.maxChars > 0 ) 
				{
					this.txtMaxChars.text = this.layer.maxChars.toString( )+ ' characters max'; 
					this.txt.maxChars = this.layer.maxChars
				}
				
				
			}
			
			protected function chkVisible_changeHandler(event:Event):void
			{
				//this.layer.visible = this.chkVisible.selected; 
				this.layer.update(); 
			}
			
			
			
			private function fontSize_changeHandler(event:IndexChangeEvent):void {
				var item:Object = event.currentTarget.selectedItem;
				/* var fontStyle:TextLayoutFormat = new TextLayoutFormat();
				fontStyle.fontSize = item;
				editManager.applyLeafFormat(fontStyle); */
				
				this.dispatchEvent( new CustomEvent( CHANGE_FONT_SIZE, int(item )  ) ) 
			}
			
			private function fontFamily_changeHandler(event:IndexChangeEvent):void {
				var item:Object = event.currentTarget.selectedItem;
				/* var fontStyle:TextLayoutFormat = new TextLayoutFormat();
				fontStyle.fontFamily = item;
				editManager.applyLeafFormat(fontStyle); */
				this.dispatchEvent( new CustomEvent( CHANGE_FONT_FAMILY, item   ) ) 
			}
			
			protected function txt_changeHandler(event:TextOperationEvent):void
			{
				this.dispatchEvent( new CustomEvent( CHANGED_TEXT   ) ) 
			}
			protected function colorList_ClickHandler(event:Event):void
			{
				//this.oldFocus = this.getFocus()
				return; 
			}
			
			private function colorPicker_changeHandler(event:Event):void {
				var colorFormat:uint;
				if (event is ColorPickerEvent)
					colorFormat = event.currentTarget.selectedColor as uint;
				else if (event is IndexChangeEvent)
					colorFormat = event.currentTarget.selectedItem as uint;
				
				this.dispatchEvent( new CustomEvent( CHANGE_COLOR, colorFormat   ) ) 
			}
			
			
			protected function colorList_focusInHandler(event:FocusEvent):void
			{
				return;
				//this.oldFocus = this.getFocus()
			}
			
			
			
			protected function chkBoxAlign_changeHandler(event:Event):void
			{
				this.dispatchEvent( new CustomEvent( CHANGE_TEXT_ALIGN, this.chkBoxAlign.selected   ) ) 
				
			}
			
			protected function dropDown_FontSelect_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				if ( event.newIndex == -1 ) 
					return; 
				var item:Object = event.currentTarget.selectedItem;
				this.dispatchEvent( new CustomEvent( CHANGE_FONT_FAMILY, item   ) ) 
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<!--This component will need to know via json:
		Engravable surfaces, arrray [true, true, true, true]
		Eligible fonts and limits: map [font1:size limit,font2:size limit]
		Product Images : map [font:zoom, back:zoom]
		Any saved text already on the lighter - if the product is being edited - (we might handle this somewhere else)
		-->
		
		<!--This component will send signals to controller/model for:
		engraving text changed - whenever user deletes or adds text
		Flip product image - whenever user needs to rotate main lighter image to show other side
		New engraved surface - whenever user starts engraving a new surface, so we can update the right-most mini cart
		remove engraved surface
		
		display notice - whenever user clicks question mark - let the main application handle displaying a message to the users
		-->
	</fx:Declarations>
	<s:Rect radiusX="8" radiusY="8"
			width="100%" height="100%" >
		<s:fill >
			<s:SolidColor color="0xffffff" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xe9e9e9"/>
		</s:stroke>
	</s:Rect>
	
	
	<s:VGroup id="menu" width="100%" height="100%" gap="10"
			  paddingBottom="12" paddingLeft="12" paddingRight="12" paddingTop="16">
		
		
		
		<!--
		
		<s:HGroup width="100%" height="26">
		<s:Label text="Front Top" styleName="arialSubHeading"/>
		<s:Label text="|" styleName="arialSubHeading"/>
		<s:Label text="Front Bottom" styleName="arialSubHeading"/>
		<s:Label text="|" styleName="arialSubHeading"/>
		<s:Label text="Back Top" styleName="arialSubHeading"/>
		<s:Label text="|" styleName="arialSubHeading"/>
		<s:Label text="Back Bottom" styleName="arialSubHeading" />	
		</s:HGroup>-->
		
		
		<s:HGroup width="100%" height="60" paddingTop="12">
			<s:VGroup width="100%">
				<s:HGroup width="50%">
					<s:Label text="Choose A Font" fontSize="16" 
							 styleName="subHeading"/>
					<s:Label text="45 charectors max"  id="txtMaxChars" styleName="Arial grayTxt"/>
					
				</s:HGroup>
				<s:DropDownList id="fontSelect" width="100%" height="38"
								change="dropDown_FontSelect_changeHandler(event)"
								skinClass="org.virid.smallComponents.LightGrayRoundedDropDown"
								cornerRadius="8" borderColor="0xe9e9e9" dropShadowVisible="false"
								/>			
			</s:VGroup>
			
			
			<s:VGroup width="50%" visible="false" includeInLayout="false">
				<s:HGroup><s:CheckBox label="Right to Left"  
									  id="chkBoxAlign"
									  change="chkBoxAlign_changeHandler(event)"
									  styleName="Arial grayTxt"/></s:HGroup>
				<s:HGroup><s:CheckBox label="Monogram" styleName="Arial grayTxt"/></s:HGroup>
				
			</s:VGroup>
		</s:HGroup>
		
		
		
		
		<s:VGroup width="100%" paddingTop="20">
			<s:HGroup width="100%" horizontalAlign="left">
				<s:Label text="EDIT Text" 
						 styleName="subHeading" textAlign="left" fontSize="16"/>
			</s:HGroup>
			
			
			<s:HGroup width="100%">
				<s:TextInput  id="txt" text="Text" change="txt_changeHandler(event)"  width="100%" height="38" paddingTop="10" focusAlpha="0"
							  skinClass="org.virid.skins.LightGrayRoundedFormField" borderColor="0xe9e9e9"/>
				<s:Button label="ADD  MY  TEXT"  click="onAddText(event)" visible="false" includeInLayout="false"
						  skinClass="org.virid.skins.simpleBlackBtn" verticalCenter="0"
						  height="20"/>
				
			</s:HGroup>			
			
			<!--		<s:DropDownList id="dropDownFont" />
			<s:DropDownList id="dropDownSize" dataProvider="{new ArrayList([8,10,12,16,24,36,48,72])}" />-->
			<!--
			<s:ComboBox id="fontSize" width="50" cornerRadius="0" selectedItem="12"
			change="fontSize_changeHandler(event)" toolTip="Font size"
			dataProvider="{new ArrayCollection([6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,32,36,40,44,48,54,60,66,72,80,88,96])}"/>
			
			<s:ComboBox id="fontFamily" width="100" cornerRadius="0" selectedIndex="0"
			change="fontFamily_changeHandler(event)" toolTip="Font family">
			<s:dataProvider>
			<s:ArrayCollection>
			<fx:Object>Arial</fx:Object>
			<fx:Object>Courier</fx:Object>
			<fx:Object>Courier New</fx:Object>
			<fx:Object>Geneva</fx:Object>
			<fx:Object>Georgia</fx:Object>
			<fx:Object>Helvetica</fx:Object>
			<fx:Object>Times New Roman</fx:Object>
			<fx:Object>Times</fx:Object>
			<fx:Object>Verdana</fx:Object>
			</s:ArrayCollection>
			</s:dataProvider>
			</s:ComboBox>
			-->
			<!--- @private -->
			<mx:ColorPicker id="colorPicker" height="23" color="0x000000"
							mouseOver="this.colorList_ClickHandler(event)" focusAlpha="0.1"
							change="colorPicker_changeHandler(event)" toolTip="Text color"/>
			<!--- @private -->
			<skins:ColorList id="colorList" width="50" height="23" visible="false"
							 includeInLayout="false"
							 focusIn="colorList_focusInHandler(event)" 
							 skinClass="org.syncon.Customizer.view.skins.ColorListSkin"
							 itemRenderer="org.syncon.Customizer.view.skins.ColorListItemRenderer"
							 selectedIndex="0" change="colorPicker_changeHandler(event)"
							 toolTip="Text color"/>
		</s:VGroup>
	</s:VGroup>
</s:Group>
