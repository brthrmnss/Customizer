<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="54"
		  initialize="button1_initializeHandler(event)"
		  
		  rollOver="button1_rollOverHandler(event)"
		  rollOut="button1_rollOutHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			private var creationCompleteCalled:Boolean = false;
			private var _iconSource:String = '';
			private var _labelName:String = '';
			public var _selected:Boolean;
			
			public function set selected(yo:Boolean):void{
				
				_selected = yo;
				if(_selected){
					this.currentState="selected";
				}
				else{
					this.currentState="normal";	
				
				}
			}
			
			protected function button1_initializeHandler(event:FlexEvent):void
			{
				this.creationCompleteCalled = true;
				this.label = this._labelName;
				this.icon = this._iconSource;
				
				 
			}
			
			protected function button1_rollOverHandler(event:MouseEvent):void
			{
				this.currentState = "hovered";
				
				//change main icon color
				var newColor:ColorTransform =  new ColorTransform();
				newColor.color = 0xf6171c;
				this.iconDisplay.transform.colorTransform = newColor;
				
			}
			protected function button1_rollOutHandler(event:MouseEvent):void
			{
				if(_selected)
					return;
				this.currentState = "normal";
				
				
				
				//change main icon color
				var newColor:ColorTransform =  new ColorTransform();
				newColor.color = 0x8e8e8e;
				this.iconDisplay.transform.colorTransform = newColor;
			}
			
			
			public function set icon(imageSource:String):void
			{
				//this.txtText = string;
				this._iconSource = imageSource; 
				if ( this.creationCompleteCalled == false ) return; //let creationcomplete handle this
				this.iconDisplay.source = this._iconSource; 
			}
			
			public function set label(text:String):void
			{
				//this.txtText = string;
				this._labelName = text; 
				if ( this.creationCompleteCalled == false ) return; //let creationcomplete handle this
				this.labelDisplay.text = this._labelName; 
			}
			

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Linear id="easing"/>
	</fx:Declarations>
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		<mx:Transition toState="hovered" >
			<s:Parallel>
				<s:Move targets="{[iconDisplay]}" duration="200" />
				<!--<s:AnimateColor target="{this.iconDisplay}" duration="200"  />-->
				<s:Animate target="{iconDisplay}"  duration="400" easer="{easing}" />
			</s:Parallel>
			
		</mx:Transition>
		<mx:Transition fromState="current" toState="hovered" >
			<s:Parallel>
				<s:Move targets="{[iconDisplay]}" duration="200" />
				<!--<s:AnimateColor target="{this.iconDisplay}" duration="200"  />-->
				<s:Animate target="{iconDisplay}"  duration="400" easer="{easing}" />
			</s:Parallel>
			
		</mx:Transition>
		<mx:Transition toState="normal" >
			<s:Parallel>
				<s:Move targets="{[iconDisplay]}" duration="200" />
				<!--<s:AnimateColor target="{this.iconDisplay}" duration="200"  />-->
				<s:Animate target="{iconDisplay}"  duration="200" easer="{easing}" />
			</s:Parallel>
			
		</mx:Transition>
	</s:transitions>	

	<!-- <s:Image id="iconDisplay" horizontalCenter="0"/> -->
	<s:BitmapImage id="iconDisplay" 
				   width="32" height="32" y.normal="0" y.hovered="-2" horizontalCenter="0" 
				   smooth="true" smoothingQuality="high" 
				   >
		<!--<s:filters>
			<s:DropShadowFilter alpha="0.1" blurX="2" blurY="2" distance="3" angle="45"/>
		</s:filters>-->
	</s:BitmapImage>
	<s:Label id="labelDisplay"
			 textAlign="center" styleName="grayTxt" styleName.hovered="redTxt"
			 maxDisplayedLines="1"
			 horizontalCenter="0"   verticalAlign="bottom"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
</s:Group>
